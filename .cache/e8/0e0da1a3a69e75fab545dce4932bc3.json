{"id":"src/components/WebGLFont/fragment/demo-01.glsl","dependencies":[{"name":"/usr/local/d4/aether/ui/pkg/three-txt/package.json","includedInParent":true,"mtime":1582705178986}],"generated":{"js":"module.exports = \"#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n\\n// Variable qualifiers that come with the shader\\nprecision highp float;\\n#define GLSLIFY 1\\nuniform float opacity;\\nuniform vec3 color;\\nuniform sampler2D map;\\nvarying vec2 vUv;\\n// We passed this one\\nuniform float time;\\n\\n// HSL to RGB color conversion module\\nfloat hue2rgb(float f1, float f2, float hue) {\\n    if (hue < 0.0)\\n        hue += 1.0;\\n    else if (hue > 1.0)\\n        hue -= 1.0;\\n    float res;\\n    if ((6.0 * hue) < 1.0)\\n        res = f1 + (f2 - f1) * 6.0 * hue;\\n    else if ((2.0 * hue) < 1.0)\\n        res = f2;\\n    else if ((3.0 * hue) < 2.0)\\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\\n    else\\n        res = f1;\\n    return res;\\n}\\n\\nvec3 hsl2rgb(vec3 hsl) {\\n    vec3 rgb;\\n\\n    if (hsl.y == 0.0) {\\n        rgb = vec3(hsl.z); // Luminance\\n    } else {\\n        float f2;\\n\\n        if (hsl.z < 0.5)\\n            f2 = hsl.z * (1.0 + hsl.y);\\n        else\\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\\n\\n        float f1 = 2.0 * hsl.z - f2;\\n\\n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\\n        rgb.g = hue2rgb(f1, f2, hsl.x);\\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\\n    }\\n    return rgb;\\n}\\n\\nvec3 hsl2rgb(float h, float s, float l) {\\n    return hsl2rgb(vec3(h, s, l));\\n}\\n\\nfloat median(float r, float g, float b) {\\n  return max(min(r, g), min(max(r, g), b));\\n}\\n\\nvoid main() {\\n  // This is the code that comes to produce msdf\\n  vec3 sample = texture2D(map, vUv).rgb;\\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\\n  float alpha = clamp(sigDist/fwidth(sigDist) + 0.5, 0.0, 1.0);\\n\\n  // Colors\\n  vec3 lightBlue = hsl2rgb(202.0 / 360.0, 1.0, 0.5);\\n  vec3 navyBlue = hsl2rgb(238.0 / 360.0, 0.47, 0.31);\\n\\n  // Goes from 1.0 to 0.0 and vice versa\\n  float t = cos(time) * 0.5 + 0.5;\\n\\n  // Interpolate from light to navy blue\\n  vec3 newColor = mix(lightBlue, navyBlue, t);\\n\\n  gl_FragColor = vec4(newColor, alpha * opacity);\\n  if (gl_FragColor.a < 0.0001) discard;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"src/components/WebGLFont/fragment/demo-01.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"src/components/WebGLFont/fragment/demo-01.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"src/components/WebGLFont/fragment/demo-01.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"src/components/WebGLFont/fragment/demo-01.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"src/components/WebGLFont/fragment/demo-01.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":2092},"source":"src/components/WebGLFont/fragment/demo-01.glsl","original":{"line":1,"column":0}}],"sources":{"src/components/WebGLFont/fragment/demo-01.glsl":"module.exports=\"#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n\\n// Variable qualifiers that come with the shader\\nprecision highp float;\\n#define GLSLIFY 1\\nuniform float opacity;\\nuniform vec3 color;\\nuniform sampler2D map;\\nvarying vec2 vUv;\\n// We passed this one\\nuniform float time;\\n\\n// HSL to RGB color conversion module\\nfloat hue2rgb(float f1, float f2, float hue) {\\n    if (hue < 0.0)\\n        hue += 1.0;\\n    else if (hue > 1.0)\\n        hue -= 1.0;\\n    float res;\\n    if ((6.0 * hue) < 1.0)\\n        res = f1 + (f2 - f1) * 6.0 * hue;\\n    else if ((2.0 * hue) < 1.0)\\n        res = f2;\\n    else if ((3.0 * hue) < 2.0)\\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\\n    else\\n        res = f1;\\n    return res;\\n}\\n\\nvec3 hsl2rgb(vec3 hsl) {\\n    vec3 rgb;\\n\\n    if (hsl.y == 0.0) {\\n        rgb = vec3(hsl.z); // Luminance\\n    } else {\\n        float f2;\\n\\n        if (hsl.z < 0.5)\\n            f2 = hsl.z * (1.0 + hsl.y);\\n        else\\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\\n\\n        float f1 = 2.0 * hsl.z - f2;\\n\\n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\\n        rgb.g = hue2rgb(f1, f2, hsl.x);\\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\\n    }\\n    return rgb;\\n}\\n\\nvec3 hsl2rgb(float h, float s, float l) {\\n    return hsl2rgb(vec3(h, s, l));\\n}\\n\\nfloat median(float r, float g, float b) {\\n  return max(min(r, g), min(max(r, g), b));\\n}\\n\\nvoid main() {\\n  // This is the code that comes to produce msdf\\n  vec3 sample = texture2D(map, vUv).rgb;\\n  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\\n  float alpha = clamp(sigDist/fwidth(sigDist) + 0.5, 0.0, 1.0);\\n\\n  // Colors\\n  vec3 lightBlue = hsl2rgb(202.0 / 360.0, 1.0, 0.5);\\n  vec3 navyBlue = hsl2rgb(238.0 / 360.0, 0.47, 0.31);\\n\\n  // Goes from 1.0 to 0.0 and vice versa\\n  float t = cos(time) * 0.5 + 0.5;\\n\\n  // Interpolate from light to navy blue\\n  vec3 newColor = mix(lightBlue, navyBlue, t);\\n\\n  gl_FragColor = vec4(newColor, alpha * opacity);\\n  if (gl_FragColor.a < 0.0001) discard;\\n}\";"},"lineCount":null}},"error":null,"hash":"baf8b7604481f32e8e1bf91d66dc2dbd","cacheData":{"env":{}}}